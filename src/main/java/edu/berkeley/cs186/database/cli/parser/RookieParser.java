/* RookieParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. RookieParser.java */
package edu.berkeley.cs186.database.cli.parser;

@SuppressWarnings("all")
public class RookieParser/*@bgen(jjtree)*/implements RookieParserTreeConstants, RookieParserConstants {/*@bgen(jjtree)*/
  protected JJTRookieParserState jjtree = new JJTRookieParserState();

  final public ASTSQLStatementList sql_stmt_list() throws ParseException {/*@bgen(jjtree) SQLStatementList */
  ASTSQLStatementList jjtn000 = new ASTSQLStatementList(JJTSQLSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SCOL:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(SCOL);
      }
      sql_stmt();
      label_2:
      while (true) {
        jj_consume_token(SCOL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SCOL:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_WITH:
        case K_DELETE:
        case K_INSERT:
        case K_UPDATE:
        case K_SELECT:
        case K_CREATE:
        case K_DROP:
        case K_BEGIN:
        case K_END:
        case K_COMMIT:
        case K_SAVEPOINT:
        case K_ROLLBACK:
        case K_RELEASE:
        case K_EXPLAIN:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        sql_stmt();
        label_4:
        while (true) {
          jj_consume_token(SCOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SCOL:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void sql_stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case K_WITH:
    case K_SELECT:{
      select_stmt();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2)) {
        create_table_stmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CREATE:{
          create_index_stmt();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          if (jj_2_2(2)) {
            drop_table_stmt();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_DROP:{
              drop_index_stmt();
              break;
              }
            case K_INSERT:{
              insert_stmt();
              break;
              }
            case K_DELETE:{
              delete_stmt();
              break;
              }
            case K_UPDATE:{
              update_stmt();
              break;
              }
            case K_BEGIN:{
              begin_stmt();
              break;
              }
            case K_END:
            case K_COMMIT:{
              commit_stmt();
              break;
              }
            case K_ROLLBACK:{
              rollback_stmt();
              break;
              }
            case K_SAVEPOINT:{
              savepoint_stmt();
              break;
              }
            case K_RELEASE:{
              release_stmt();
              break;
              }
            case K_EXPLAIN:{
              explain_stmt();
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
}

  final public ASTExecutableStatement executable_stmt() throws ParseException {/*@bgen(jjtree) ExecutableStatement */
  ASTExecutableStatement jjtn000 = new ASTExecutableStatement(JJTEXECUTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WITH:
      case K_SELECT:{
        select_stmt();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        if (jj_2_3(2)) {
          create_table_stmt();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_CREATE:{
            create_index_stmt();
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            if (jj_2_4(2)) {
              drop_table_stmt();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case K_DROP:{
                drop_index_stmt();
                break;
                }
              case K_INSERT:{
                insert_stmt();
                break;
                }
              case K_DELETE:{
                delete_stmt();
                break;
                }
              case K_UPDATE:{
                update_stmt();
                break;
                }
              case K_END:
              case K_COMMIT:{
                commit_stmt();
                break;
                }
              case K_ROLLBACK:{
                rollback_stmt();
                break;
                }
              case K_SAVEPOINT:{
                savepoint_stmt();
                break;
                }
              case K_RELEASE:{
                release_stmt();
                break;
                }
              case K_EXPLAIN:{
                explain_stmt();
                break;
                }
              default:
                jj_la1[9] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SCOL:{
        jj_consume_token(SCOL);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte000;}
         }
         if (jjte000 instanceof ParseException) {
           {if (true) throw (ParseException)jjte000;}
         }
         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
    }
    throw new Error("Missing return statement in function");
}

  final public void explain_stmt() throws ParseException {/*@bgen(jjtree) ExplainStatement */
  ASTExplainStatement jjtn000 = new ASTExplainStatement(JJTEXPLAINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EXPLAIN);
      select_stmt();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void drop_table_stmt() throws ParseException {/*@bgen(jjtree) DropTableStatement */
  ASTDropTableStatement jjtn000 = new ASTDropTableStatement(JJTDROPTABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      jj_consume_token(K_TABLE);
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void drop_index_stmt() throws ParseException {/*@bgen(jjtree) DropIndexStatement */
  ASTDropIndexStatement jjtn000 = new ASTDropIndexStatement(JJTDROPINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      jj_consume_token(K_INDEX);
      identifier();
      jj_consume_token(OPEN_PAR);
      column_name();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void release_stmt() throws ParseException {/*@bgen(jjtree) ReleaseStatement */
  ASTReleaseStatement jjtn000 = new ASTReleaseStatement(JJTRELEASESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_RELEASE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_SAVEPOINT:{
        jj_consume_token(K_SAVEPOINT);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void savepoint_stmt() throws ParseException {/*@bgen(jjtree) SavepointStatement */
  ASTSavepointStatement jjtn000 = new ASTSavepointStatement(JJTSAVEPOINTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SAVEPOINT);
      identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void rollback_stmt() throws ParseException {/*@bgen(jjtree) RollbackStatement */
  ASTRollbackStatement jjtn000 = new ASTRollbackStatement(JJTROLLBACKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ROLLBACK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TO:{
        jj_consume_token(K_TO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SAVEPOINT:{
          jj_consume_token(K_SAVEPOINT);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        identifier();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void begin_stmt() throws ParseException {/*@bgen(jjtree) BeginStatement */
  ASTBeginStatement jjtn000 = new ASTBeginStatement(JJTBEGINSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BEGIN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void commit_stmt() throws ParseException {/*@bgen(jjtree) CommitStatement */
  ASTCommitStatement jjtn000 = new ASTCommitStatement(JJTCOMMITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMIT:{
        jj_consume_token(K_COMMIT);
        break;
        }
      case K_END:{
        jj_consume_token(K_END);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TRANSACTION:{
        jj_consume_token(K_TRANSACTION);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void insert_stmt() throws ParseException {/*@bgen(jjtree) InsertStatement */
  ASTInsertStatement jjtn000 = new ASTInsertStatement(JJTINSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      identifier();
      jj_consume_token(K_VALUES);
      insert_values();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        insert_values();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void insert_values() throws ParseException {/*@bgen(jjtree) InsertValues */
  ASTInsertValues jjtn000 = new ASTInsertValues(JJTINSERTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_PAR);
      literal();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        literal();
      }
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void update_stmt() throws ParseException {/*@bgen(jjtree) UpdateStatement */
  ASTUpdateStatement jjtn000 = new ASTUpdateStatement(JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_UPDATE);
      identifier();
      jj_consume_token(K_SET);
      column_name();
      jj_consume_token(EQ);
      expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        expression();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void select_stmt() throws ParseException {/*@bgen(jjtree) SelectStatement */
  ASTSelectStatement jjtn000 = new ASTSelectStatement(JJTSELECTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WITH:{
        jj_consume_token(K_WITH);
        common_table_expression();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[21] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          common_table_expression();
        }
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      select_clause();
      from_clause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        column_value_comparison();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AND:{
          jj_consume_token(K_AND);
          column_value_comparison();
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GROUP:{
        jj_consume_token(K_GROUP);
        jj_consume_token(K_BY);
        column_name();
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          column_name();
        }
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ORDER:{
        order_clause();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_LIMIT:{
        limit_clause();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void common_table_expression() throws ParseException {/*@bgen(jjtree) CommonTableExpression */
  ASTCommonTableExpression jjtn000 = new ASTCommonTableExpression(JJTCOMMONTABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAR:{
        jj_consume_token(OPEN_PAR);
        column_name();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
          column_name();
        }
        jj_consume_token(CLOSE_PAR);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(K_AS);
      jj_consume_token(OPEN_PAR);
      select_stmt();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void delete_stmt() throws ParseException {/*@bgen(jjtree) DeleteStatement */
  ASTDeleteStatement jjtn000 = new ASTDeleteStatement(JJTDELETESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DELETE);
      jj_consume_token(K_FROM);
      identifier();
      jj_consume_token(K_WHERE);
      expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void create_table_stmt() throws ParseException {/*@bgen(jjtree) CreateTableStatement */
  ASTCreateTableStatement jjtn000 = new ASTCreateTableStatement(JJTCREATETABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_TABLE);
      identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAR:{
        jj_consume_token(OPEN_PAR);
        column_def();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          column_def();
        }
        jj_consume_token(CLOSE_PAR);
        break;
        }
      case K_AS:{
        jj_consume_token(K_AS);
        select_stmt();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void create_index_stmt() throws ParseException {/*@bgen(jjtree) CreateIndexStatement */
  ASTCreateIndexStatement jjtn000 = new ASTCreateIndexStatement(JJTCREATEINDEXSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_INDEX);
      jj_consume_token(K_ON);
      identifier();
      jj_consume_token(OPEN_PAR);
      column_name();
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void column_def() throws ParseException {/*@bgen(jjtree) ColumnDef */
 ASTColumnDef jjtn000 = new ASTColumnDef(JJTCOLUMNDEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String i1, i2; Token k = null;
    try {
      i1 = identifier();
      i2 = identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAR:{
        jj_consume_token(OPEN_PAR);
        k = jj_consume_token(DIGITS);
        jj_consume_token(CLOSE_PAR);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
jjtn000.value = new Object[]{i1, i2, k};
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void select_clause() throws ParseException {/*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      select_column();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        select_column();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void limit_clause() throws ParseException {/*@bgen(jjtree) LimitClause */
 ASTLimitClause jjtn000 = new ASTLimitClause(JJTLIMITCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int n;
    try {
      jj_consume_token(K_LIMIT);
      n = integer_literal();
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
jjtn000.value=n;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void from_clause() throws ParseException {/*@bgen(jjtree) FromClause */
 ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String[] atn;
    try {
ASTfrom_clause jjtn001 = new ASTfrom_clause(JJTFROM_CLAUSE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(K_FROM);
        aliased_table_name();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_INNER:
          case K_JOIN:{
            ;
            break;
            }
          default:
            jj_la1[35] = jj_gen;
            break label_12;
          }
          joined_table();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
       }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
}

  final public void order_clause() throws ParseException {/*@bgen(jjtree) OrderClause */
 ASTOrderClause jjtn000 = new ASTOrderClause(JJTORDERCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s;
    try {
      jj_consume_token(K_ORDER);
      jj_consume_token(K_BY);
      s = column_name();
jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
jjtn000.value = s;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void joined_table() throws ParseException {/*@bgen(jjtree) JoinedTable */
 ASTJoinedTable jjtn000 = new ASTJoinedTable(JJTJOINEDTABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String column1, column2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INNER:{
        jj_consume_token(K_INNER);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(K_JOIN);
      aliased_table_name();
      jj_consume_token(K_ON);
      column1 = column_name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        break;
        }
      case EQEQ:{
        jj_consume_token(EQEQ);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      column2 = column_name();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.value = new String[]{column1, column2};
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public String select_column() throws ParseException {/*@bgen(jjtree) SelectColumn */
 ASTSelectColumn jjtn000 = new ASTSelectColumn(JJTSELECTCOLUMN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null; String s = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        t = jj_consume_token(STAR);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        if (jj_2_5(3)) {
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(DOT);
          jj_consume_token(STAR);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OPEN_PAR:
          case PLUS:
          case MINUS:
          case FALSE:
          case TRUE:
          case NOT:
          case K_NOT:
          case NUMERIC_LITERAL:
          case STRING_LITERAL:
          case DATE_LITERAL:
          case IDENTIFIER:{
            expression();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_AS:{
              jj_consume_token(K_AS);
              s = identifier();
              break;
              }
            default:
              jj_la1[38] = jj_gen;
              ;
            }
            break;
            }
          default:
            jj_la1[40] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                                                    jjtc000 = false;
if (t == null) {
            jjtn000.value = "<>";
        } else if (t.image.equals("*")) {
            jjtn000.value = "*";
        } else {
            jjtn000.value = t.image + ".*";
        }
        if (s!=null) {
            jjtn000.value += " AS " + s;
        }
        {if ("" != null) return (String) jjtn000.value;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void result_column_name() throws ParseException {/*@bgen(jjtree) ResultColumnName */
 ASTResultColumnName jjtn000 = new ASTResultColumnName(JJTRESULTCOLUMNNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1; Token t2 = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.value = "*";
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        if (jj_2_6(2)) {
          t1 = jj_consume_token(IDENTIFIER);
          jj_consume_token(OPEN_PAR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            t2 = jj_consume_token(IDENTIFIER);
            break;
            }
          case STAR:{
            t2 = jj_consume_token(STAR);
            break;
            }
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(CLOSE_PAR);
jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
jjtn000.value = t1.image + "(" + t2.image + ")";
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER:{
            t1 = jj_consume_token(IDENTIFIER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DOT:{
              jj_consume_token(DOT);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case IDENTIFIER:{
                t2 = jj_consume_token(IDENTIFIER);
                break;
                }
              case STAR:{
                t2 = jj_consume_token(STAR);
                break;
                }
              default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
              }
            default:
              jj_la1[43] = jj_gen;
              ;
            }
jjtree.closeNodeScope(jjtn000, true);
                                                                 jjtc000 = false;
jjtn000.value = t2 != null ? t1.image + "." + t2.image : t1.image;
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  final public String column_name() throws ParseException {/*@bgen(jjtree) ColumnName */
 ASTColumnName jjtn000 = new ASTColumnName(JJTCOLUMNNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; String s = "";
    try {
      t = jj_consume_token(IDENTIFIER);
s += t.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
s += "." + t.image;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
jjtn000.value = s;
        {if ("" != null) return s;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String identifier() throws ParseException {/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void aliased_table_name() throws ParseException {/*@bgen(jjtree) AliasedTableName */
 ASTAliasedTableName jjtn000 = new ASTAliasedTableName(JJTALIASEDTABLENAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String name1, name2=null;
    try {
      name1 = identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AS:{
        jj_consume_token(K_AS);
        name2 = identifier();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
jjtn000.value = new String[]{name1, name2};
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public void column_value_comparison() throws ParseException {/*@bgen(jjtree) ColumnValueComparison */
  ASTColumnValueComparison jjtn000 = new ASTColumnValueComparison(JJTCOLUMNVALUECOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        column_name();
        comparison_operator();
        literal();
        break;
        }
      case PLUS:
      case MINUS:
      case FALSE:
      case TRUE:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:{
        literal();
        comparison_operator();
        column_name();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
}

  final public String numeric_literal() throws ParseException {/*@bgen(jjtree) NumericLiteral */
 ASTNumericLiteral jjtn000 = new ASTNumericLiteral(JJTNUMERICLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; jjtn000.value = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          t = jj_consume_token(PLUS);
          break;
          }
        case MINUS:{
          t = jj_consume_token(MINUS);
jjtn000.value += t.image;
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      t = jj_consume_token(NUMERIC_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
jjtn000.value += t.image; {if ("" != null) return (String) jjtn000.value;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public int integer_literal() throws ParseException {/*@bgen(jjtree) IntegerLiteral */
 ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s;
    try {
      s = numeric_literal();
jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
jjtn000.value = Integer.parseInt(s); {if ("" != null) return Integer.parseInt(s);}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
}

  final public String literal() throws ParseException {/*@bgen(jjtree) Literal */
 ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null; String s=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
        break;
        }
      case PLUS:
      case MINUS:
      case NUMERIC_LITERAL:{
        s = numeric_literal();
        break;
        }
      case DATE_LITERAL:{
        t = jj_consume_token(DATE_LITERAL);
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (s != null) jjtn000.value = s;
        else jjtn000.value=t.image;
        {if ("" != null) return (String) jjtn000.value;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String comparison_operator() throws ParseException {/*@bgen(jjtree) ComparisonOperator */
 ASTComparisonOperator jjtn000 = new ASTComparisonOperator(JJTCOMPARISONOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        t = jj_consume_token(EQ);
        break;
        }
      case EQEQ:{
        t = jj_consume_token(EQEQ);
        break;
        }
      case NOT_EQ1:{
        t = jj_consume_token(NOT_EQ1);
        break;
        }
      case NOT_EQ2:{
        t = jj_consume_token(NOT_EQ2);
        break;
        }
      case LT_EQ:{
        t = jj_consume_token(LT_EQ);
        break;
        }
      case LT:{
        t = jj_consume_token(LT);
        break;
        }
      case GT_EQ:{
        t = jj_consume_token(GT_EQ);
        break;
        }
      case GT:{
        t = jj_consume_token(GT);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.value=t.image;
        {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public void and_operator() throws ParseException {/*@bgen(jjtree) OrOperator */
  ASTOrOperator jjtn000 = new ASTOrOperator(JJTOROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AND:{
        jj_consume_token(K_AND);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  final public void or_operator() throws ParseException {/*@bgen(jjtree) AndOperator */
  ASTAndOperator jjtn000 = new ASTAndOperator(JJTANDOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OR:{
        jj_consume_token(K_OR);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  final public void not_operator() throws ParseException {/*@bgen(jjtree) NotOperator */
  ASTNotOperator jjtn000 = new ASTNotOperator(JJTNOTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      case NOT:{
        jj_consume_token(NOT);
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
}

  final public String multiplicative_operator() throws ParseException {/*@bgen(jjtree) MultiplicativeOperator */
 ASTMultiplicativeOperator jjtn000 = new ASTMultiplicativeOperator(JJTMULTIPLICATIVEOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        t = jj_consume_token(STAR);
        break;
        }
      case FSLASH:{
        t = jj_consume_token(FSLASH);
        break;
        }
      case PERCENT:{
        t = jj_consume_token(PERCENT);
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
jjtn000.value=t.image;
        {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public String additive_operator() throws ParseException {/*@bgen(jjtree) AdditiveOperator */
 ASTAdditiveOperator jjtn000 = new ASTAdditiveOperator(JJTADDITIVEOPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
jjtn000.value=t.image;
        {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
}

  final public ASTExpression expression() throws ParseException {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      or_expression();
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  final public void or_expression() throws ParseException {/*@bgen(jjtree) OrExpression */
  ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      and_expression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:
        case K_OR:{
          ;
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          break label_13;
        }
        or_operator();
        and_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void and_expression() throws ParseException {/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      not_expression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:
        case K_AND:{
          ;
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_14;
        }
        and_operator();
        not_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void not_expression() throws ParseException {/*@bgen(jjtree) NotExpression */
  ASTNotExpression jjtn000 = new ASTNotExpression(JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:
        case K_NOT:{
          ;
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          break label_15;
        }
        not_operator();
      }
      comparison_expression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void comparison_expression() throws ParseException {/*@bgen(jjtree) ComparisonExpression */
  ASTComparisonExpression jjtn000 = new ASTComparisonExpression(JJTCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      additive_expression();
      label_16:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_16;
        }
        comparison_operator();
        additive_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void additive_expression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      multiplicative_expression();
      label_17:
      while (true) {
        if (jj_2_8(2)) {
          ;
        } else {
          break label_17;
        }
        additive_operator();
        multiplicative_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void multiplicative_expression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      primary_expression();
      label_18:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_18;
        }
        multiplicative_operator();
        primary_expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void function_call_expression() throws ParseException {/*@bgen(jjtree) FunctionCallExpression */
 ASTFunctionCallExpression jjtn000 = new ASTFunctionCallExpression(JJTFUNCTIONCALLEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      identifier();
      jj_consume_token(OPEN_PAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_PAR:
      case STAR:
      case PLUS:
      case MINUS:
      case FALSE:
      case TRUE:
      case NOT:
      case K_NOT:
      case NUMERIC_LITERAL:
      case STRING_LITERAL:
      case DATE_LITERAL:
      case IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          t = jj_consume_token(STAR);
jjtn000.value = t.image;
          break;
          }
        case OPEN_PAR:
        case PLUS:
        case MINUS:
        case FALSE:
        case TRUE:
        case NOT:
        case K_NOT:
        case NUMERIC_LITERAL:
        case STRING_LITERAL:
        case DATE_LITERAL:
        case IDENTIFIER:{
          expression();
          label_19:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[61] = jj_gen;
              break label_19;
            }
            jj_consume_token(COMMA);
            expression();
          }
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_PAR);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  final public void primary_expression() throws ParseException {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(3)) {
        literal();
      } else if (jj_2_11(2)) {
        function_call_expression();
      } else if (jj_2_12(2)) {
        column_name();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_PAR:{
          jj_consume_token(OPEN_PAR);
          expression();
          jj_consume_token(CLOSE_PAR);
          break;
          }
        case PLUS:
        case MINUS:{
          additive_operator();
          primary_expression();
          break;
          }
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3_8()
 {
    if (jj_3R_additive_operator_451_5_24()) return true;
    if (jj_3R_multiplicative_expression_489_3_25()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_multiplicative_operator_438_5_26()) return true;
    if (jj_3R_primary_expression_497_9_27()) return true;
    return false;
  }

  private boolean jj_3R_drop_table_stmt_178_5_21()
 {
    if (jj_scan_token(K_DROP)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_501_9_32()
 {
    if (jj_3R_additive_operator_451_5_24()) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_500_9_31()
 {
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_column_name_349_5_30()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_function_call_expression_493_3_29()) return true;
    return false;
  }

  private boolean jj_3R_primary_expression_497_9_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_expression_500_9_31()) {
    jj_scanpos = xsp;
    if (jj_3R_primary_expression_501_9_32()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_literal_389_5_28()) return true;
    return false;
  }

  private boolean jj_3R_create_table_stmt_265_5_20()
 {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  private boolean jj_3R_comparison_operator_406_5_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_identifier_358_5_34()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_comparison_operator_406_5_22()) return true;
    if (jj_3R_additive_expression_484_3_23()) return true;
    return false;
  }

  private boolean jj_3R_additive_operator_451_5_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    return false;
  }

  private boolean jj_3R_literal_391_13_33()
 {
    if (jj_3R_numeric_literal_377_4_36()) return true;
    return false;
  }

  private boolean jj_3R_function_call_expression_493_3_29()
 {
    if (jj_3R_identifier_358_5_34()) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3R_column_name_349_5_30()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_column_name_349_37_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_drop_table_stmt_178_5_21()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_create_table_stmt_265_5_20()) return true;
    return false;
  }

  private boolean jj_3R_multiplicative_expression_489_3_25()
 {
    if (jj_3R_primary_expression_497_9_27()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3R_multiplicative_operator_438_5_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_literal_389_5_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_3R_literal_391_13_33()) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_numeric_literal_377_16_38()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_additive_expression_484_3_23()
 {
    if (jj_3R_multiplicative_expression_489_3_25()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_column_name_349_37_35()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_numeric_literal_377_5_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_3R_numeric_literal_377_16_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_numeric_literal_377_4_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_numeric_literal_377_5_37()) jj_scanpos = xsp;
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_drop_table_stmt_178_5_21()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_create_table_stmt_265_5_20()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RookieParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x20,0x20,0xd0000000,0x20,0x10000000,0x0,0xc0000000,0x10000000,0x0,0xc0000000,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x200,0x10000000,0x0,0x0,0x200,0x0,0x0,0x0,0x200,0x80,0x200,0x20000080,0x80,0x200,0x0,0x0,0x180000,0x20000000,0x400,0x3806080,0x400,0x400,0x40,0x400,0x0,0x40,0x20000000,0x1806000,0x6000,0x6000,0x1806000,0x7f8000,0x4000000,0x8000000,0x2000000,0x1c00,0x6000,0x8000000,0x4000000,0x2000000,0x200,0x3806480,0x3806480,0x6080,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x1b71800a,0x0,0x8,0x8000,0x1b710002,0x8,0x8000,0x1b610002,0x0,0x1000000,0x800000,0x1000000,0x4000000,0x800000,0x600000,0x800000,0x0,0x0,0x100,0x0,0x0,0x200,0x100,0x0,0x1000,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x20,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x400,0x800,0x0,0x0,0x400,0x200,0x800,0x0,0x800,0x800,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c2,0x100,0x100,0x0,0x0,0x100,0x0,0x0,0x1c2,0x0,0x0,0xc2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c2,0x1c2,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RookieParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RookieParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.getMessage()); }
	 token_source = new RookieParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 65; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e.getMessage()); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 65; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RookieParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RookieParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 65; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RookieParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 65; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RookieParser(RookieParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 65; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RookieParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 65; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
		 int[] oldentry = (int[])(it.next());
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[73];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 65; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 73; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = (int[])jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 12; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
